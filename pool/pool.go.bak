package pool

import (
	"runtime"
	"sync"
	"sync/atomic"
	"unsafe"
)

// A Pool is a set of temporary objects that may be individually saved and
// retrieved.
//
// Any item stored in the Pool may be removed automatically at any time without
// notification. If the Pool holds the only reference when this happens, the
// item might be deallocated.
//
// A Pool is safe for use by multiple goroutines simultaneously.
//
// Pool's purpose is to cache allocated but unused items for later reuse,
// relieving pressure on the garbage collector. That is, it makes it easy to
// build efficient, thread-safe free lists. However, it is not suitable for all
// free lists.
//
// An appropriate use of a Pool is to manage a group of temporary items
// silently shared among and potentially reused by concurrent independent
// clients of a package. Pool provides a way to amortize allocation overhead
// across many clients.
//
// An example of good use of a Pool is in the fmt package, which maintains a
// dynamically-sized store of temporary output buffers. The store scales under
// load (when many goroutines are actively printing) and shrinks when
// quiescent.
//
// On the other hand, a free list maintained as part of a short-lived object is
// not a suitable use for a Pool, since the overhead does not amortize well in
// that scenario. It is more efficient to have such objects implement their own
// free list.
//
// A Pool must not be copied after first use.
type Pool[X any] struct {
	local     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal
	localSize uintptr        // size of the local array

	victim     unsafe.Pointer // local from previous cycle
	victimSize uintptr        // size of victims array

	// New optionally specifies a function to generate
	// a value. It may not be changed concurrently with
	// calls to Get.
	New func() X
}

type A struct {
	b string
}

type object[X any] struct {
	exist uint32
	val   X
}

// Local per-P Pool appendix.
type poolLocalInternal[X any] struct {
	private object[X]    // Can be used only by the respective P.
	shared  poolChain[X] // Local P can pushHead/popHead; any P can popTail.
}

type poolLocal[X any] struct {
	private object[X]    // Can be used only by the respective P.
	shared  poolChain[X] // Local P can pushHead/popHead; any P can popTail.

	// Prevents false sharing on widespread platforms with
	// 128 mod (cache line size) = 0 .
	pad [128]byte
}

func poolLocalSize[X any]() uintptr {
	return unsafe.Sizeof(poolLocal[X]{}) + (128 - unsafe.Sizeof(poolLocal[X]{})%128)
}

// from runtime
//go:linkname fastrandn sync.fastrandn
func fastrandn(n uint32) uint32

// Put adds x to the pool.
func (p *Pool[X]) Put(x X) {
	l, _ := p.pin()
	if l.private.exist == 0 {
		l.private.val = x
		l.private.exist = 1
	} else {
		l.shared.pushHead(x)
	}
	runtime_procUnpin()
}

// Get selects an arbitrary item from the Pool, removes it from the
// Pool, and returns it to the caller.
// Get may choose to ignore the pool and treat it as empty.
// Callers should not assume any relation between values passed to Put and
// the values returned by Get.
//
// If Get would otherwise return nil and p.New is non-nil, Get returns
// the result of calling p.New.
func (p *Pool[X]) Get() (val X) {
	var ok bool
	l, pid := p.pin()
	o := l.private
	l.private = object[X]{}
	if ok = o.exist != 0; ok {
		runtime_procUnpin()
		return o.val
	}
	// Try to pop the head of the local shard. We prefer
	// the head over the tail for temporal locality of
	// reuse.
	if val, ok = l.shared.popHead(); !ok {
		val, ok = p.getSlow(pid)
	}
	runtime_procUnpin()
	if !ok && p.New != nil {
		val = p.New()
	}
	return
}

func (p *Pool[X]) getSlow(pid int) (val X, ok bool) {
	// See the comment in pin regarding ordering of the loads.
	size := runtime_LoadAcquintptr(&p.localSize) // load-acquire
	locals := p.local                            // load-consume
	// Try to steal one element from other procs.
	for i := 0; i < int(size); i++ {
		l := indexLocal[X](locals, (pid+i+1)%int(size))
		if val, ok = l.shared.popTail(); ok {
			return
		}
	}

	// Try the victim cache. We do this after attempting to steal
	// from all primary caches because we want objects in the
	// victim cache to age out if at all possible.
	size = atomic.LoadUintptr(&p.victimSize)
	if uintptr(pid) >= size {
		return
	}
	locals = p.victim
	l := indexLocal[X](locals, pid)
	if ok = l.private.exist != 0; ok {
		val = l.private.val
		l.private = object[X]{}
		return
	}
	for i := 0; i < int(size); i++ {
		l := indexLocal[X](locals, (pid+i)%int(size))
		if val, ok = l.shared.popTail(); ok {
			return
		}
	}

	// Mark the victim cache as empty for future gets don't bother
	// with it.
	atomic.StoreUintptr(&p.victimSize, 0)

	return
}

// pin pins the current goroutine to P, disables preemption and
// returns poolLocal pool for the P and the P's id.
// Caller must call runtime_procUnpin() when done with the pool.
func (p *Pool[X]) pin() (*poolLocal[X], int) {
	pid := runtime_procPin()
	// In pinSlow we store to local and then to localSize, here we load in opposite order.
	// Since we've disabled preemption, GC cannot happen in between.
	// Thus here we must observe local at least as large localSize.
	// We can observe a newer/larger local, it is fine (we must observe its zero-initialized-ness).
	s := runtime_LoadAcquintptr(&p.localSize) // load-acquire
	l := p.local                              // load-consume
	if uintptr(pid) < s {
		return indexLocal[X](l, pid), pid
	}
	return p.pinSlow()
}

func (p *Pool[X]) pinSlow() (*poolLocal[X], int) {
	// Retry under the mutex.
	// Can not lock the mutex while pinned.
	runtime_procUnpin()
	allPoolsMu.Lock()
	defer allPoolsMu.Unlock()
	pid := runtime_procPin()
	// poolCleanup won't be called while we are pinned.
	s := p.localSize
	l := p.local
	if uintptr(pid) < s {
		return indexLocal[X](l, pid), pid
	}
	if p.local == nil {
		allPools = append(allPools, (*Pool[any])(unsafe.Pointer(p)))
	}
	// If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one.
	size := runtime.GOMAXPROCS(0)
	local := make([]poolLocal[X], size)
	l = unsafe.Pointer(&local[0])
	atomic.StorePointer(&p.local, l)                     // store-release
	runtime_StoreReluintptr(&p.localSize, uintptr(size)) // store-release
	return indexLocal[X](l, pid), pid
}

func poolCleanup() {
	// This function is called with the world stopped, at the beginning of a garbage collection.
	// It must not allocate and probably should not call any runtime functions.

	// Because the world is stopped, no pool user can be in a
	// pinned section (in effect, this has all Ps pinned).

	// Drop victim caches from all pools.
	for _, p := range oldPools {
		rp := (*Pool[any])(p)
		rp.victim = nil
		rp.victimSize = 0
	}

	// Move primary cache to victim cache.
	for _, p := range allPools {
		rp := (*Pool[any])(p)
		rp.victim = rp.local
		rp.victimSize = rp.localSize
		rp.local = nil
		rp.localSize = 0
	}

	// The pools with non-empty primary caches now have non-empty
	// victim caches and no pools have primary caches.
	oldPools, allPools = allPools, nil
}

var (
	allPoolsMu sync.Mutex

	// allPools is the set of pools that have non-empty primary
	// caches. Protected by either 1) allPoolsMu and pinning or 2)
	// STW.
	allPools []*Pool[any]

	// oldPools is the set of pools that may have non-empty victim
	// caches. Protected by STW.
	oldPools []*Pool[any]
)

func init() {
	runtime_registerPoolCleanup(poolCleanup)
}

func indexLocal[X any](l unsafe.Pointer, i int) *poolLocal[X] {
	lp := unsafe.Pointer(uintptr(l) + uintptr(i)*unsafe.Sizeof(poolLocal[X]{}))
	return (*poolLocal[X])(lp)
}

// Implemented in runtime.
//go:linkname runtime_registerPoolCleanup sync.runtime_registerPoolCleanup
func runtime_registerPoolCleanup(cleanup func())

//go:linkname runtime_procPin sync.runtime_procPin
func runtime_procPin() int

//go:linkname runtime_procUnpin sync.runtime_procUnpin
func runtime_procUnpin()

// The below are implemented in runtime/internal/atomic and the
// compiler also knows to intrinsify the symbol we linkname into this
// package.

//go:linkname runtime_LoadAcquintptr runtime/internal/atomic.LoadAcquintptr
func runtime_LoadAcquintptr(ptr *uintptr) uintptr

//go:linkname runtime_StoreReluintptr runtime/internal/atomic.StoreReluintptr
func runtime_StoreReluintptr(ptr *uintptr, val uintptr) uintptr

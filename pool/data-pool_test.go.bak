package pool

import (
	"fmt"
	"sync"
	"testing"
)

func TestDataPool(t *testing.T) {

	pool := NewDataPool(DataPoolConfig{})

	waiter := sync.WaitGroup{}
	for i := 0; i < 10; i++ {
		waiter.Add(1)
		go func() {
			var chunks []Data
			for i := 0; i < 500; i++ {
				chunks = append(chunks, pool.Alloc(300))
				fmt.Println(pool.DataPoolInfo().String())
			}
			for _, chunk := range chunks {
				chunk.Release()
				fmt.Println(pool.DataPoolInfo().String())
			}
			waiter.Done()
		}()
	}

	waiter.Wait()
	return
}

func TestDataPool_Alloc(t *testing.T) {
	p := NewDataPool(DataPoolConfig{
		StackSize:  2,
		BufferSize: 1024,
	})
	for i := 0; i < 200000000; i++ {
		d := p.Alloc(1024)
		d.Release()
	}
}

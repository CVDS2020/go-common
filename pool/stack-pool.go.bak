package pool

import (
	"sync"
)

type StackPool struct {
	stack      []interface{}
	top        int
	lock       sync.Mutex
	createFunc func() interface{}
}

func NewStackPool(size uint, createFunc func() interface{}) *StackPool {
	return new(StackPool).Init(size, createFunc)
}

func (p *StackPool) Init(size uint, createFunc func() interface{}) *StackPool {
	if size == 0 {
		size = DefaultStackSize
	}
	stack := make([]interface{}, size)
	for i := range stack {
		stack[i] = createFunc()
	}
	p.stack = stack
	p.createFunc = createFunc
	return p
}

func (p *StackPool) Pop() interface{} {
	p.lock.Lock()
	defer p.lock.Unlock()
	if p.top == len(p.stack) {
		return p.createFunc()
	}
	obj := p.stack[p.top]
	p.top++
	return obj
}

func (p *StackPool) Push(obj interface{}) bool {
	p.lock.Lock()
	defer p.lock.Unlock()
	if p.top == 0 {
		return false
	}
	p.top--
	p.stack[p.top] = obj
	return true
}
